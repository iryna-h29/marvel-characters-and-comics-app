{"version":3,"file":"static/js/282.6c84b04c.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearch/charSearchForm.js","components/errorBoundar/ErrorBoundary.js","components/pages/mainPage.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img}\r\n        style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: \"0 auto\"}}\r\n        alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n// рендерни комнонент(той який просто відображає):\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const imageAvailibility = thumbnail.includes('image_not_available') ? '_unavailable' : \"\";\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={\"randomchar__img\" + imageAvailibility}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default RandomChar;","import {Component, useState, useEffect, useContext, useRef } from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport charContext from '../../context/context';\nimport './charList.scss';\n\nconst CharList = () => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        window.addEventListener('scrollend', onScroll);\n        return () => {\n            window.removeEventListener(\"scrollend\", onScroll);\n        }\n    }, []);\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (newList) => {\n        let ended = false;\n        if (newList.length < 9) {\n            ended = true;\n        }\n\n\n        setCharList(charList => [...charList, ...newList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const onScroll = () => {\n        if (offset < 219) return;\n        if (newItemLoading) return;\n        if (charEnded) window.removeEventListener(\"scrollend\", onScroll);\n     \n        if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n            onRequest(offset);\n        }\n    };\n\n    \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const content = charList.map(item => <CSSTransition key={item.id} timeout={500} classNames=\"char__item\"><CharItem item={item}/></CSSTransition>);\n    // charId={selectedChar}\n    return (\n        <div className=\"char__list\">\n                {spinner}\n                {errorMessage}\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {content}\n                </TransitionGroup>\n            </ul>\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nconst CharItem = (props) => {\n    \n    const context = useContext(charContext);\n    const myRef = useRef(null); \n\n    const {id, name, thumbnail} = props.item;\n    const imageAvailability = !thumbnail.includes('image_not_available') ? {'objectFit' : 'cover'} : {'objectFit' : 'unset'};\n\n    useEffect(() => {\n        if (myRef?.current) {\n            if (id === context.selectedChar) {\n                myRef.current.focus();\n            }\n        }\n      }, [myRef]);\n\n    \n    return (\n        <li ref={myRef} className=\"char__item\" tabIndex={0} onFocus={() => context.changeChar(id)}>\n            <img src={thumbnail} alt={name} style={imageAvailability}/>\n            <div className=\"char__name\">{name}</div>\n        </li>\n    )\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState, useContext } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport { Link } from 'react-router-dom';\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\nimport charContext from '../../context/context';\nimport './charInfo.scss';\nimport PropTypes from 'prop-types';\n\nconst CharInfo = () => {\n    const [char, setChar] = useState(null);\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const context = useContext(charContext);\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    useEffect(() => {\n        updateChar();\n    }, [context.selectedChar])\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (this.props.charId !== prevProps.charId) {\n    //         this.updateChar();\n    //     }\n    // }\n   \n    const updateChar = () => {\n        // const {charId} = props;\n        // if (!charId) {\n        //     return;\n        // }\n        if (!context.selectedChar) {\n            return;\n        }\n        clearError();\n        // props.charId\n        getCharacter(context.selectedChar)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\nconst View = ({char}) => {\n    const context = useContext(charContext);\n    const {id, name, description, thumbnail, homepage, wiki, comics} = char;\n    const imageAvailability = !thumbnail.includes('image_not_available') ? {'objectFit' : 'cover'} : {'objectFit' : 'contain'};\n    return (\n        <>\n            <Helmet>\n                    <meta\n                        name=\"description\"\n                        content={`${name} character info`}\n                        />\n                    <title>{name} - character info</title>\n            </Helmet>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imageAvailability}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    Array.isArray(comics) \n                    ? comics.map((item, i) => {\n                        return (\n                            <Link to={`/comics/${item.resourceURI.split('/').pop()}`} key={i} className=\"char__comics-item\" onClick={context.OnBackToComics}>\n                                {item.name}\n                            </Link>\n                        )\n                    }) \n                    : comics\n                }\n            </ul>\n        </>\n    )\n}\n\n// CharInfo.propTypes = {\n//     charId: PropTypes.number\n// }\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState, useContext } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearch/charSearchForm\";\r\nimport ErrorBoundary from '../errorBoundar/ErrorBoundary';\r\n// import charContext from \"../../context/context\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n    // const [selectedChar, setChar] = useState(null);\r\n\r\n    // const onCharSelected = (id) => {\r\n    //    setChar(id);\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList /> \r\n                    {/* onCharSelected={onCharSelected} */}\r\n                </ErrorBoundary>\r\n                <div className=\"char__content-sticky\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo />\r\n                        {/* charId={selectedChar} */}\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n"],"names":["ErrorMessage","_jsx","src","img","style","display","width","height","objectFit","margin","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imageAvailibility","includes","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharItem","props","context","useContext","charContext","myRef","useRef","item","imageAvailability","current","selectedChar","focus","ref","tabIndex","onFocus","changeChar","CharList","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","window","addEventListener","onScroll","removeEventListener","initial","newList","ended","length","innerHeight","scrollY","document","body","offsetHeight","map","CSSTransition","timeout","classNames","TransitionGroup","component","disabled","Skeleton","_Fragment","comics","Helmet","Array","isArray","i","Link","to","resourceURI","split","pop","OnBackToComics","CharInfo","skeleton","CharSearchForm","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage"],"sourceRoot":""}