{"version":3,"file":"static/js/985.5b9b32cb.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/charSearchForm.js","components/errorBoundar/ErrorBoundary.js","components/pages/mainPage.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img}\r\n        style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: \"0 auto\"}}\r\n        alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport './randomChar.scss';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, []);\r\n\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1 - 20)) + 20; //  (1011400 - 1011000)) + 1011000;\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\" onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// рендерни комнонент(той який просто відображає):\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    const imageAvailibility = thumbnail.includes('image_not_available') ? '_unavailable' : \"\";\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className={\"randomchar__img\" + imageAvailibility}/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default RandomChar;","import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\r\nimport { Link, useParams, useNavigate } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\n\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0); // 210\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const [loadingNewItems, setLoadingNewItems] = useState(false);\r\n\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true, false);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const onRequest = (offset, initial, loadingbtnclicked) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        loadingbtnclicked ? setLoadingNewItems(true) : setLoadingNewItems(false);\r\n        getAllCharacters(offset)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = async(newList) => {\r\n        let ended = false;\r\n        if (newList.length < 6) {\r\n            ended = true;\r\n        }\r\n        setCharList(charList => [...charList, ...newList]);\r\n        setNewItemLoading(false);\r\n        // setLoadingNewItems(false);\r\n        setOffset(offset => offset + 6);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    // const onScroll = () => {\r\n    //     if (offset < 219) return;\r\n    //     if (newItemLoading) return;\r\n    //     if (charEnded) window.removeEventListener(\"scrollend\", onScroll);\r\n     \r\n    //     if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n    //         onRequest(offset);\r\n    //     }\r\n    // };\r\n\r\n    \r\n    const renderItems = (arr) => {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n                    <CharItem item={item} onCharSelected={props.onCharSelected} loadingNewItems={loadingNewItems}/>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    };\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset, false, true)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CharItem = ({item, onCharSelected, loadingNewItems}) => {\r\n    \r\n    const myRef = useRef(null); \r\n    const {characterId} = useParams();\r\n\r\n    const {id, name, thumbnail} = item;\r\n    const imageAvailability = !thumbnail.includes('image_not_available') ? {'objectFit' : 'cover'} : {'objectFit' : 'unset'};\r\n\r\n    useEffect(() => {\r\n        // console.log(loadingNewItems);\r\n        if (characterId == id) {\r\n            if (!myRef?.current.classList.contains('char__item-selected')) {\r\n                myRef?.current.classList.add('char__item-selected');\r\n                if (!loadingNewItems) {\r\n                    myRef?.current.focus();\r\n                }\r\n            }\r\n        } else {\r\n            myRef?.current.classList.remove('char__item-selected');\r\n        }\r\n    }, [characterId]);\r\n\r\n\r\n    const selectOnItem = () => {\r\n        if (!myRef?.current.classList.contains('char__item-selected')) {\r\n            myRef?.current.classList.add('char__item-selected');\r\n            myRef?.current.focus();\r\n        }\r\n        const charInfoEl = document.querySelector('.char__info-wrapper');\r\n        charInfoEl.classList.add(\"open\");\r\n    }\r\n\r\n    \r\n    return (\r\n        <li\r\n            ref={myRef}\r\n            id={id} \r\n            className=\"char__item\" \r\n            tabIndex={0} \r\n            onClick={() => {\r\n                onCharSelected(id);\r\n                selectOnItem();\r\n            }}\r\n            onKeyUp={(e) => {\r\n                if (e.key === \"Enter\") {\r\n                    onCharSelected(id);\r\n                    selectOnItem();\r\n                }\r\n            }}>\r\n            <Link to={`/characters/${id}`} \r\n                tabIndex={-1}\r\n                className='char__link'>\r\n                <img src={thumbnail} alt={name} style={imageAvailability} tabIndex={-1}/>\r\n                <div className=\"char__name\" tabIndex={-1}>{name}</div>\r\n            </Link>   \r\n        </li>\r\n    )\r\n};\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\nexport default CharList;","import { useCallback, useEffect, useState } from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport './charInfo.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const {characterId} = useParams();\r\n\r\n    const [char, setChar] = useState(null);\r\n    \r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId]);\r\n\r\n   \r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId && !characterId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        // props.charId\r\n        getCharacter(charId || characterId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const closePopup = useCallback(() => {\r\n        const charInfoEl = document.querySelector('.char__info-wrapper');\r\n        charInfoEl.classList.remove(\"open\");\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className={'char__info-wrapper '}>\r\n            <div className=\"char__info\">\r\n                {setContent(process, View, char, closePopup)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({data, func}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    const imageAvailability = !thumbnail.includes('image_not_available') ? {'objectFit' : 'cover'} : {'objectFit' : 'contain'};\r\n    const scrolledListStyles = Array.isArray(comics) && comics.length > 1 ? {'overflowY' : 'scroll'} : null;\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content={`${name} character info`}\r\n                        />\r\n                    <title>{name} - character info</title>\r\n            </Helmet>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imageAvailability}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <div className=\"close\">\r\n                    <button className='close__btn' onClick={() => func()}>X</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\" style={scrolledListStyles}>\r\n                {\r\n                    Array.isArray(comics) \r\n                    ? comics.map((item, i) => {\r\n                        // item.resourceURI.split('/').pop()\r\n                        // item.name\r\n                        return (\r\n                            <Link to={`/comics/${item.resouceURI}`} key={i} className=\"char__comics-item\"> \r\n                                {item}\r\n                            </Link>\r\n                        )\r\n                    }) \r\n                    : comics\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        // because new db case-sensitive:\r\n        name = name.split(\" \").map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\r\n        console.log(name);\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}/info`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearch/charSearchForm\";\r\nimport ErrorBoundary from '../errorBoundar/ErrorBoundary';\r\n// import charContext from \"../../context/context\";\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n       setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/> \r\n                </ErrorBoundary>\r\n                <div className=\"char__content-sticky\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\nimport { Component } from \"react\";\r\n\r\nconst setContent = (process, Component, data, func) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data} func={func}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","src","img","style","display","width","height","objectFit","margin","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imageAvailibility","includes","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharItem","item","onCharSelected","loadingNewItems","myRef","useRef","characterId","useParams","imageAvailability","current","classList","contains","add","focus","remove","selectOnItem","document","querySelector","ref","tabIndex","onKeyUp","e","key","Link","to","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","setLoadingNewItems","getAllCharacters","onRequest","initial","loadingbtnclicked","async","ended","newList","length","elements","useMemo","Component","Spinner","Error","arr","items","map","i","imgStyle","CSSTransition","timeout","classNames","TransitionGroup","component","renderItems","disabled","func","comics","scrolledListStyles","Array","isArray","_Fragment","Helmet","content","resouceURI","charId","closePopup","useCallback","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","split","word","charAt","toUpperCase","slice","join","console","log","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","MainPage","selectedChar","CharList","CharInfo","Skeleton"],"sourceRoot":""}